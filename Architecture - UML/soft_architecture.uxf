<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>0</x><y>120</y><w>330</w><h>520</h></coordinates><panel_attributes>*Solver*
--
+conductivities: dict
+electrode_system: str
+domain: sfepy.discrete.fem.domain
+problem: sfepy.discrete.Problem
+essential_boundaries: list
+field_variable: dict
+fields: dict
-settings: dict
-settings_header: str
-exta_path: str
-linear_solver: sfepy.solvers.ls.PETScKrylovSolver
-non_linear_solver: sfepy.solvers.nls.Newton
-overall_volume: sfepy.discrete.common.region
-material_conductivity: sfepy.discrete.Material
-selected_model: str
--
+load_mesh(model: str, connectivity: str)
+define_field_variable(var_name: str, field_name: str)
+define_essential_boundary(region_name: str, group_id: int, 
                                               field_variable: str, 
                                               field_values: float)
+solver_setup(max_iterations: int, relative_tol: float,
                        absolute_tol; float, verbose: bool)
+run_solver(save_results: bool, 
                     post_process_calculation: bool, output_dir: str, 
                     output_file_name: str): sfepy.discrete.State
+set_custom_post_process(function: object)
+clear_all()
-generate_equations(): sfepy.discrete.Equations
-material_definition()
-assign_regions()
-get_conductivity(): dict
-post_process(): sfepy.base.base.Struct</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>570</x><y>90</y><w>330</w><h>200</h></coordinates><panel_attributes>*MeshOperations*
--
+merged_meshes: pymesh.Mesh
+skin_with_electrodes: pymesh.Mesh
+electrode_mesh: pymesh.Mesh
+surface_meshes: list
--
+load_surface_meshes(base_path: str, file_names: list)
+electrode_meshing(sphere: bool): pymesh.Mesh
+phm_model_meshing(mesh_filename: str)
+sphere_model_meshing(mesh_filename: str)
+region_points(boundary_surfaces: list, shift: float,
                         electrode_mesh: pymesh.Mesh, 
                         max_volume: float): dict</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>370</x><y>410</y><w>360</w><h>230</h></coordinates><panel_attributes>*ElectrodeOperations*
--
+electrode_array: dict
#surface_mesh: pymesh.Mesh
#electrode_attributes: dict
--
+add_electrodes_on_skin(): list
+standard_electrode_positioning()
+sphere_electrode_positioning()
+get_electrode_array(): dict
+get_electrode_single_mesh(): pymesh.Mesh
+electrode_position_sphere(radius: float, theta: float, 
                                              phi: float): numpy.array
-orient_electrode(init_point: numpy.array): numpy.array
-orient_electrode_sphere(init_point: numpy.array, 
                                         delta_point: numpy.array): numpy.array</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>770</x><y>410</y><w>330</w><h>120</h></coordinates><panel_attributes>*FileOperations*
--

--
+poly_write(file_name: str, nodes: list, faces: list, 
                    regions: dict, boundaries: list)
+gmsh_write(file_name: str, surfaces: list, 
                      domains: list, physical_tags: list, 
                      bounding_surface_tag: list)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>530</x><y>280</y><w>220</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>200;10;200;70;10;70;10;130</additional_attributes></element><element><id>Relation</id><coordinates><x>720</x><y>330</y><w>230</w><h>100</h></coordinates><panel_attributes>lt=-
</panel_attributes><additional_attributes>10;20;210;20;210;80</additional_attributes></element></diagram>